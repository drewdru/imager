//class TestInterface
//{
//public:
//    virtual ~TestInterface()
//    {
//    }

//    virtual int getValues() = 0;
//    virtual void ChangeBrightnessY(unsigned char* bitmap, size_t n, unsigned char Y) = 0;
//    virtual void GrayWorld(unsigned char* bitmap, size_t n) = 0;
//};

//class PM_WIDGET_EXPORT TestDLL_lib : public TestInterface
//{
//public:
//    TestDLL_lib();
//    ~TestDLL_lib(){}

//    int a;
//    int b;
//    int c;

//    int getValues();
//    void ChangeBrightnessY(unsigned char* bitmap, size_t n, unsigned char Y);
//    void GrayWorld(unsigned char* bitmap, size_t n);

//    void RGBToYUV(unsigned char* bitmap, size_t n);
//    void YUVToRGB(unsigned char* bitmap, size_t n);
//};

/*extern "C" PM_WIDGET_EXPORT TestInterface *create_TestDLL_lib()
{
    return new TestDLL_lib();
}*/

//TestDLL_lib::TestDLL_lib()
//{
//    a = 10;
//    b = 20;
//    c = 30;
//}

//int TestDLL_lib::getValues()
//{
//    return a+b+c;
//}

//void TestDLL_lib::RGBToYUV(unsigned char* bitmap, size_t n)
//{
//    //Y = 0.299 * R + 0.587 * G + 0.114 * B;
//    //U = -0.14713 * R - 0.28886 * G + 0.436 * B + 128;
//    //V = 0.615 * R - 0.51499 * G - 0.10001 * B + 128;
//    for (size_t i = 1; i < n-1; i+=3)
//    {
//        double Y = 0.299 * bitmap[i - 1] + 0.587 * bitmap[i] + 0.114 * bitmap[i+1];
//        double U = -0.14713 * bitmap[i - 1] - 0.28886 * bitmap[i] + 0.436 * bitmap[i + 1] + 128;
//        double V = 0.615 * bitmap[i - 1] - 0.51499 * bitmap[i] - 0.10001 * bitmap[i + 1] + 128;
        
//        if (Y>=0&&Y<=255) bitmap[i - 1] = Y;
//        else if (Y<0) bitmap[i - 1] = 0;
//        else bitmap[i - 1] = 255;
        
//        if (U>=0&&U<=255) bitmap[i] = U;
//        else if (U<0) bitmap[i] = 0;
//        else bitmap[i] = 255;
        
//        if (V>=0&&V<=255) bitmap[i + 1] = V;
//        else if (V<0) bitmap[i + 1] = 0;
//        else bitmap[i + 1] = 255;
//    }
//}

//void TestDLL_lib::YUVToRGB(unsigned char* bitmap, size_t n)
//{
//    //R = Y + 1.13983 * (V - 128);
//    //G = Y - 0.39465 * (U - 128) - 0.58060 * (V - 128);
//    //B = Y + 2.03211 * (U - 128);
//    for (size_t i = 1; i < n - 1; i += 3)
//    {
//        double R = bitmap[i - 1] + 1.13983 * (bitmap[i + 1] - 128);
//        double G = bitmap[i - 1] - 0.39465 * (bitmap[i] - 128) - 0.58060 * (bitmap[i + 1] - 128);
//        double B = bitmap[i - 1] + 2.03211 * (bitmap[i] - 128);
        
//        if (R>=0&&R<=255) bitmap[i - 1] = R;
//        else if (R<0) bitmap[i - 1] = 0;
//        else bitmap[i - 1] = 255;
        
//        if (G>=0&&G<=255) bitmap[i] = G;
//        else if (G<0) bitmap[i] = 0;
//        else bitmap[i] = 255;
        
//        if (B>=0&&B<=255) bitmap[i + 1] = B;
//        else if (B<0) bitmap[i + 1] = 0;
//        else bitmap[i + 1] = 255;
//    }
//}

//void TestDLL_lib::ChangeBrightnessY(unsigned char* bitmap, size_t n, unsigned char Y)
//{
//    RGBToYUV(bitmap, n);
//    for (size_t i = 0; i < n; i += 3)
//    {
//        if ((bitmap[i] + Y >= 0) && (bitmap[i] + Y <= 235)) bitmap[i] += Y;
//        else if (bitmap[i] + Y < 16) bitmap[i] = 16;
//        else bitmap[i] = 235;
//    }
//    YUVToRGB(bitmap, n);
//}

//void TestDLL_lib::GrayWorld(unsigned char* bitmap, size_t n)
//{
//    long avgR = 0, avgG = 0, avgB = 0, avg = 0;
//    for (size_t i = 1; i < n - 1; i += 3)
//    {
//        avgR += bitmap[i - 1];
//        avgG += bitmap[i];
//        avgB += bitmap[i + 1];
//    }
    
//    avgR = (avgR + n-1)/n;
//    avgG = (avgG + n-1)/n;
//    avgB = (avgB + n-1)/n;
//    /*if (avgR == 0) avgR = 1;
//    if (avgG == 0) avgG = 1;
//    if (avgB == 0) avgB = 1;*/
//    avg = (avgR + avgG + avgB) / 3;
//    for (size_t i = 1; i < n - 1; i += 3)
//    {
//        bitmap[i - 1] = (unsigned char)(bitmap[i - 1] * (avg / avgR));
//        bitmap[i] = (unsigned char)(bitmap[i] * (avg / avgG));
//        bitmap[i + 1] = (unsigned char)(bitmap[i + 1] * (avg / avgB));
//        /*if (bitmap[i - 1] * (avg / avgR) > 255)
//            bitmap[i - 1] = 255;
//        if (bitmap[i] * (avg / avgG) > 255)
//            bitmap[i] = 255;
//        if (bitmap[i + 1] * (avg / avgB) > 255)
//            bitmap[i + 1] = 255;*/
//    }
//}

/*РЕАЛИЗАЦИЯ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
//class TestInterface
//{
//public:
//    virtual ~TestInterface();

//    virtual int getValues() = 0;
//    virtual void ChangeBrightnessY(unsigned char* bitmap, size_t n, unsigned char Y) = 0;
//    virtual void GrayWorld(unsigned char* bitmap, size_t n) = 0;
//};

//class TestDLL_lib : public TestInterface
//{
//};

//typedef TestDLL_lib* (*create_TestDLL_lib_fun)();
//class ImageProcessor : public QObject
//{
//    Q_OBJECT
//    QString libDirPath;
//    QList<QLibrary*> libList;
//    TestDLL_lib* myClassInstance;
//public:
//    explicit ImageProcessor(QObject *parent = 0);
//};


//ImageProcessor::ImageProcessor(QObject *parent)
//    : QObject(parent)
//{
//    QDir dir;
//    libDirPath = dir.absolutePath()+ QDir::separator() + "lib" + QDir::separator();
//    dir.setPath("./lib");

//    //get Dynamic Link Library files
//    QList<QFileInfo> fileList;
//    QStringList filter;
//    filter<<"*.so"<<"*.dll"<<"*.dylib"<<"*.sl"<<"*.bundle";
//    fileList = dir.entryInfoList(filter);

//    //load libs
//    for (int i = 0; i < fileList.size(); ++i)
//    {
//        QLibrary* lib = new QLibrary(fileList.at(i).filePath());
//        lib->setLoadHints(QLibrary::ResolveAllSymbolsHint);
//        if (!lib->load())
//            qDebug()<<lib->errorString();
//        libList.append(lib);
//    }
//    //load methods
//    for (int i = 0; i < libList.size(); ++i)
//    {
//        create_TestDLL_lib_fun create_TestDLL_lib = (create_TestDLL_lib_fun)libList.at(i)->resolve("create_TestDLL_lib");
//        if (create_TestDLL_lib)
//        {
//            myClassInstance = create_TestDLL_lib();
//            if (myClassInstance)
//		{
//		//        qDebug() << QString::number(myClassInstance->getValues());
//		//        qDebug() << QString::number(myClassInstance->a) + " " + QString::number(myClassInstance->b) + " " + QString::number(myClassInstance->c);
//			QImage image("IN.bmp");
//			qDebug()<<image.format();
//			myClassInstance->ChangeBrightnessY(image.bits(), image.byteCount(), 20);
//			myClassInstance->GrayWorld(image.bits(), image.byteCount());
//			image.save("testOUT.png");
//			//qDebug()<<myClassInstance->getasdValues() ;
//		}
//        }
//        qDebug()<<libList.at(i)->fileName();
//    }
//}

